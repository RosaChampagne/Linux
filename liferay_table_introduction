一、系统平台相关表：company、account_、portalpreferences、virtualhost、shard等

二、用户组织机构表等：User_，contact_，organization_；

三、站点及页表相关表：group_、layout、layoutset；

四、portlet相关表：portlet、portletpreferences；

五、角色权限相关表：Role_、resourceaction、resourcepermission等；

六、网页内容相关表：journalarticle、journalarticleimage、journalfolder、ddmstructure、ddmtemplate等；

七、资源发布（Asset Publisher）相关表：assetentry、assetentries_assetcategories、assetentries_assettags等；

八、文档媒体库（文件存储相关表）：dlfileentry、dlfileentrymetadata、dlfileentrytype、dlfileversion等相关表；

九、自定义字段相关表：expandocolumn、expandorow、expandotable、expandovalue。

 

Liferay系统本身的数据库的的操作管理，都是基于ServiceBuilder进行的。类似下面这些表都是表示的关系表：

users_orgs

users_roles

users_teams

users_usergroups

groups_orgs

groups_roles

比如users_orgs，里面存储的就是用户和组织机构的对应关系，里面一般只有两个字段，分别是两个对象的ID。


一、系统平台相关表：company、account_、portalpreferences、virtualhost、shard等

Liferay的结构基本上可以按这个逻辑进行划分，一个环境包括多个实例，一个实例包含多个站点，一个站点包含多个页面，一个页面里面包含多个Portlet。

创建实例的功能在控制面板-->服务器管理-->创建实例。实例在系统中的反映就是company。

创建company的时候会主要在如下表中生成数据：company、account_、virtualhost、shard、user_、

在Liferay中一个实例相当于云计算中多租户中的一个租户。

Company表
companyId：实例ID，也就是其他表中的companyId，在大部分场景下我们只有一个实例，此companyid不变。

accountId：对应于account_表里面的accountId。

webId：有点类似实例的名称，用来做区分不同实例的。

key_：系统自动生成，基于代码Base64.objectToString(Encryptor.generateKey())

mx：公司的邮件域名，创建时一般和域名保持一致即可。

homeURL：首页的地址，一般默认为空，对应于控制面板，portal设置里面的首页地址。

logoId：实例级别的logo的id，对于应用image表里面的id，在Portal设置显示里面更改logo是此值变化。

system：此值作用不知道，默认为false。界面上没有修改的地方。

maxUsers：可以创建多少用户，用来对实例进行限制，对于多租户场景下的服务租用适合。

active_：此实例是否激活，在实例管理处进行的设置。

account_表
只作主要字段的说明。

userId，userName：为空，一般不修改。

name：和实例中的webId相同。对应于Portal设置中的名称，默认站点的名称。

parentAccountId：一般为0，不作修改。

legalName、legalId、legalType、sicCode、tickerSymbol、industry、type_：分别对应于控制面板Portal设置中的附加信息相应字段。

size：作用未知，没有地方进行初始化，没有地方进行设置。

virtualhost表
虚拟主机表，此表的主要作用是是来对应域名判断访问哪个实例，同一个tomcat中有不同的实例，不同实例的访问是基于域名进行的。

virtualHostId：表的主键，没有特别意义。

companyId：对应用于company表的主键。

layoutSetId：一般为0。

hostname：在创建实例的时候初始化的，可以在实例和portal设置中的虚拟主机那里进行修改编辑。

shard表
存放liferay的数据库分片相关信息

shardId：主键

classNameId：哪个类，对应于classname_表中的主键。一般初始化值为20025，对应用于company。

classPK：对于的className的主键。一般是初始化对应于companyId。

name：数据库分片的值，此值默认为default，可以在portal.properties里面通过 shard.default.name属性进行配置。

+++++++++++++++++++++++++++++

以上为创建实例时为主要更新的表，对于User表的信息，在介绍user表时再详说。

+++++++++++++++++++++++++++++

portalpreferences表
此表保存的为Portal的一些配置信息，主要为Portal设置里面的，比如CAS、LDAP、CDN配置等等相关信息。

如果是寻找Portal的设置是ownerId为companyId，ownerType为1。

portalPreferencesId：主键

ownerId：拥有者的Id，寻找Portal的设置的话，此处的ownerId对应用于companyId。

ownerType：Portal信息的此值为1。

preferences：具体的信息存储，里面存储的是XML结构（liferay 7.0及以后变为json格式），存储的内容主要为key-value的形式。

注意：比如是配置了CAS想取消，就可以在这里找到对应的值，然后对true改为false，重启后就修改了配置。

+++++++++++++++++++++++++++++

其他全局表
address、emailaddress、phone、website等表里面存储的分别对应于地址、邮件地址、电话、网址等，在Portal设置、组织机构、用户等的编辑处都可以见到，这是Liferay存储的一些通信信息，可为指定的对象添加多个地址、多个邮件地址、多个电话等，并设置为哪个为主要的。这些表里面只有三个字段需要特别说明，其他的看字段名即可明白。

primary_：是否主要的。

classNameId：属于是哪个对象，此ID对应于className表里面的主键。

classPK：对象的主键。

程序通过classNameId与classPK的组合，即可确定是哪一条记录。

----------------------------------------------

country表、region表

里面存储的是国家地区的一些元数据相关信息。

classname_表

实体对象信息，使用serviceBuilder生成的表，创建后都会在此生成一条记录。

classNameId：主键

value：对应的对象的名称className。

counter表

liferay里面的相关记数表

name：记数的对象，比如在代码中使用counterLocalService.increment()获取ID时，就是从name为com.liferay.counter.model.Counter的查询，在对应的valuse上面加值。

currentId：当前的ID是多少。

当代码中使用counterLocalService.increment()获取ID时，不传参数就是从name为com.liferay.counter.model.Counter获取，如果传了name，则根据name进行一次加1，如果再传了size参数，则是一次性加上指定的size。

二、用户组织机构表等：User_，contact_，organization_；

用户和组织机构相关的表主要有user_、contact_、organization_、users_orgs等

user_用户表
userId：用户Id。

defaultUser：是否默认用户，1是默认用户，0为否。默认用户为系统里面的默认用户，做一些特殊场景下的权限和获取相关信息的，不可用于登录和具体的业务处理，一般一个实例有一个默认用户。

contactId：关联到contact_表的外键，存储contactId。

password_：存储的密码，一般是加密过后的密码的hash值，具体的加密方法是在portal.properties里面进行的配置。

passwordEncrypted：是否加密，一般都是加密的，除了默认用户其他的都是1。

passwordReset：密码是否需要重置，如果为1，则用户在下一次登录的时候会让他重新设置密码，可以在用户管理密码处进行修改。

digest：用户email、屏幕名称、userId的MD5的hash值。

reminderQueryQuestion：密码找回时的问题。

reminderQueryAnswer：密码找回时的答案。

graceLoginCount：宽限登录次数，一般是在密码策略的密码到期时的设置。

screenName：屏幕名称。

emailAddress：邮件地址。

facebookId：使用facebook登录的时候的facebookId。

ldapServerId：ldap服务器里面的信息，用ldap导入时有此值。

openId：使用openid进行登录时，用户的绑定的openid的信息。

portraitId：用户的头像的图片ID，对应于image表里面的主键。

languageId：当前用户的显示语言，在用户管理的显示设置中进行修改，用户登录后会将local信息改为此信息。

timeZoneId：用户的时区。

greeting：用户的问候词，在某些应用里面可以单独设置，比如有些系统中，有些人是领导，可以单独设置为，欢迎xxx领导。

comments：用户评论，可以看作类似备注，可以在用户管理处进行修改。

firstName：用户的名字。

middleName：中间名。

lastName：姓。

jobTitle：用户职称。

loginDate：用户本次登录时间。

loginIP：登录的IP。

lastLoginDate：用户上次登录时间。

lastLoginIP：上次登录的IP。

lastFailedLoginDate：上次登录失败的时间。

failedLoginAttempts：登录失败次数。可以配置成超过指定的次数，则出现验证码等。

lockout：是否锁定。

lockoutDate：锁定时间。

agreedToTermsOfUse：用户是否已经同意了用户协议。

emailAddressVerified：邮件地址是否已经验证。

status：用户状态。

contact_表，联系信息表
此表和一般和用户的信息一一对应，可以看作是用户信息的扩展。在代码中一般不操作contact信息，可以通过user对象进行信息的获取与设置。只描述重要的字段。

userId：用户Id，对应于user表里面的相关信息。

userName：用户名称。

classNameId：这里一般为20005，对应于classname表里面的用户的对象。

classPk：对象的主键，一般为这里为用户的ID，看到这两个字段，就可以明白contact可以应用于其他对象，不止是用户。

accountId：对应于当前记录所对应的companyId所对应的accountId。一般一个实例下的都是相同的。

parentContactId：父级contact，一般为0；

emailAddress：邮件地址。

prefixId：前缀。

suffixId：后缀，这里的前缀和后缀是存的常量值，主要是方便用来作国际化。

male：性别，这里存的是是否男性。

birthday：生日。

smsSn、aimSn、facebookSn、icqSn、jabberSn、msnSn、mySpaceSn、skypeSn、twitterSn、ymSn各社交平台的帐号信息，其中的大部分在7.0里面已经废弃。

employeeStatusId：员工状态ID。

employeeNumber：员工编号。这两个字段可以用来做内部的信息编码显示处理。一般为空。

jobTitle：职称。

jobClass：工作类别等。可以根据自己的需要进行填充，没有特别的业务，可以当作liferay预留的扩展字段。

hoursOfOperation：工作小时，同上。

organization_机构表
organizationId：机构ID。主键。

companyId：实例ID。

userId：创建当前机构的用户ID。

userName：创建当前机构的用户名称。

parentOrganizationId：上级机构的Id，用来做树形结构。

treePath：保存的是organizationId树形层级结构。

name：机构名称。

type_：机构类型，是常规机构还是地点。location和regular-organization两种类型。

recursable：是否允许递归，此值为true，没有地方提供更改。

regionId：地区ID。对应region表。

countryId：国家ID。对应country表。

statusId：状态ID，默认不12017，取自portal.properties里面的sql.data.com.liferay.portal.model.ListType.organization.status配置。

comments：备注信息。

Usegroup表，用户组表
liferay的用户组，算是一个特殊用户的组合，区别于组织机构，可以为将用户组当成一个集合使用，比如有些机构里面，我们可能会需要一个领导层的用户组。

name：用户组的名称。

description：描述。

parentUserGroupId：上级用户组的Id。

addedByLDAPImport：是否是从LDAP里面导入的。

三、站点及页表相关表：group_、layout、layoutset；

Liferay里面的所有的站点信息都是保存在group表里面，包括普通站点、组织机构站点、用户组站点、用户的私人站点，模板站点等。

Group_表 站点表
groupId：站点Id。

companyId：实例Id。

creatorUserId：创建当前站点的用户Id。

classNameId：是哪个实体的站点，比如20003是组织机构，20001是普通站点，20005是用户，对应于classname表里面的相关信息。

classPK：对应实体的主键。

parentGroupId：上级站点的ID。

liveGroupId：远程活动的站点，一般情况下此站点为0，当在站点设置，待发布那里启用本地在线时，会生成一个本地的group，此处放的是对应的远程的groupId。

treePath：站点如果层级结构。

name：站点名称。

description：站点描述。

type_：站点类型，用来设置此站点的成员的加入方式，1是开放的，2是受限制的，3是私有的，可以在站点设置中修改，会有资格类型既是存储在此字段中。

typeSettings：站点的一些其他的设置，在站点设置中的其他的相关字段的配置，都是存储在此字段中，比如语言、是否启用回收站等。

manualMembership：是否允许手动的管理成员。

membershipRestriction：是否限制上级站点成员，当站点是子站点的时候此字段有用，为是否限制上级站点的成员访问此站点。

friendlyURL：友好的URL信息。

site：是否站点。存在group里面的并不是都是站点，比如站点模板。

remoteStagingGroupCount：作用暂时未知。

active_：站点是否处于激活状态。

layoutSet 页面集表
我们在站点的页面管理中，看到的公有页面、私有页面就是这个的集合的存储信息。

layoutSetId：主键

groupId：所属的站点Id。

companyId：所属的实例Id。

privateLayout：是否私有页面。

logo：是否有logo。

logoId：logo对应的图片id，对应于image表中的id。

themeId：使用的是哪个主题，对应于主题配置文件中的id。

colorSchemeId：主题使用的是哪个的颜色方案，多方案主题是有用。

wapThemeId：wap版的主题，现在基本上已经没用，7.0已经废弃。

wapColorSchemeId：wap版对应的主题颜色方案。

css：在外观和风格那里配置的CSS信息保存在这里。

pageCount：当前页面集下面有多少个页面。

settings_：其他的一些配置信息，比如远程发布的时间，是否显示站点名称等的主题配置。

layoutSetPrototypeUuid：对应的站点模板的uuid，对应于layoutsetprototype表中的uuid。

layoutSetPrototypeLinkEnabled：是否启用模板的关联，也就是模板修改后，自动的同步到当前的页面集。

layout 页面表
plid：页面id。

groupId：所属的站点Id。

companyId：所属的实例Id。

privateLayout：是否私有页面。

layoutId：页面的id，此id从1开始进行计数，主要用来做树形的结构，一个页面集下面从1开始计数。

parentLayoutId：上面的页面id，是用的layoutid，而不是plid。

name：页面名称。XML结构用来存储不同语言的名称。

title、description、keywords、robots对应用于SEO里面的标题、描述、关键词，robots，如果是做外网的应用时方便搜索引擎优化时使用。

type_：页面类型，是普通的还是URL、还是iframe等。

typeSettings：页面的一些配置信息。比如当前页面使用的是哪个布局，当前的页面上有哪些portlet等。

hidden_：是否从导航中隐藏。

friendlyURL：页面的friendlyURL。

iconImage：此页面是否有图标。

iconImageId：图标的id，对应于image表里面的信息。

themeId：使用的是哪个主题，对应于主题配置文件中的id。

colorSchemeId：主题使用的是哪个的颜色方案，多方案主题是有用。

wapThemeId：wap版的主题，现在基本上已经没用，7.0已经废弃。

wapColorSchemeId：wap版对应的主题颜色方案。

css：在外观和风格那里配置的CSS信息保存在这里。

priority：可以看作是页面的排序号。

layoutPrototypeUuid：对应的页面模板的ID。

layoutPrototypeLinkEnabled：是否和页面模板关联。

sourcePrototypeLayoutUuid：源页面的ID，在启用远程发布时有用。

+++++++++++++++++++++++++++

layoutprototype为页面模板

layoutsetprototype为站点模板。

四、portlet相关表：portlet、portletpreferences；

Portlet表
id_：主键，没有实际意义。

companyId：实例ID。

portletId：portlet的名称，系统portlet的名称，为portlet-custom.xml里面的portlet name，自己定义的为类似这样的结构：demo_WAR_BookManagerportlet，其中_WAR_前面的为portlet.xml里面定义的portlet name，后面的来所在的工程的名称。

roles：不知道用处，一般没有用处，为空。

active_：是否激活的，可以在控制面板--插件配置里面进行配置。

portletpreferences portlet配置信息存储
portletpreferences表里面存储的为Portlet的定制信息，包括在外观和风格、配置等里面的信息一般都是存储在这此表里面。

portletPreferencesId：主键信息。

ownerId：portlet属于谁，对应的为userId，一般为0；

ownerType：拥有类型，一般为3。

plid：页面id，对应于layout表里面的，plid。

portletId：portlet的Id。

preferences：对应的存储信息，里面是以XML的信息存储，结构类似portalpreferences表里面的preferences存储信息。

portlet与页面的对应关系
portlet与页面的对应关系存储在layout表里面的typeSettings字段里面。

字段信息类似如下：

column-1=82,23,11,
column-2=29,
layout-template-id=2_columns_ii
privateLayout=true
上面的意思为：当前页面是私有页面，使用的布局为2_columns_ii，拥有两个栏目，其中栏目1里面放的portlet为82，23，11，栏目2里面放的portlet为29。